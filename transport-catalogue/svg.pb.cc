// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: svg.proto

#include "svg.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace transport_catalog_serialize {
PROTOBUF_CONSTEXPR Point::Point(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PointDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PointDefaultTypeInternal() {}
  union {
    Point _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PointDefaultTypeInternal _Point_default_instance_;
PROTOBUF_CONSTEXPR RGB::RGB(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.red_)*/0u
  , /*decltype(_impl_.green_)*/0u
  , /*decltype(_impl_.blue_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RGBDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RGBDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RGBDefaultTypeInternal() {}
  union {
    RGB _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RGBDefaultTypeInternal _RGB_default_instance_;
PROTOBUF_CONSTEXPR RGBA::RGBA(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.red_)*/0u
  , /*decltype(_impl_.green_)*/0u
  , /*decltype(_impl_.opacity_)*/0
  , /*decltype(_impl_.blue_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RGBADefaultTypeInternal {
  PROTOBUF_CONSTEXPR RGBADefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RGBADefaultTypeInternal() {}
  union {
    RGBA _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RGBADefaultTypeInternal _RGBA_default_instance_;
PROTOBUF_CONSTEXPR Color::Color(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.colors_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ColorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ColorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ColorDefaultTypeInternal() {}
  union {
    Color _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ColorDefaultTypeInternal _Color_default_instance_;
}  // namespace transport_catalog_serialize
static ::_pb::Metadata file_level_metadata_svg_2eproto[4];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_svg_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_svg_2eproto = nullptr;

const uint32_t TableStruct_svg_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::transport_catalog_serialize::Point, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::transport_catalog_serialize::Point, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::transport_catalog_serialize::Point, _impl_.y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::transport_catalog_serialize::RGB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::transport_catalog_serialize::RGB, _impl_.red_),
  PROTOBUF_FIELD_OFFSET(::transport_catalog_serialize::RGB, _impl_.green_),
  PROTOBUF_FIELD_OFFSET(::transport_catalog_serialize::RGB, _impl_.blue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::transport_catalog_serialize::RGBA, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::transport_catalog_serialize::RGBA, _impl_.red_),
  PROTOBUF_FIELD_OFFSET(::transport_catalog_serialize::RGBA, _impl_.green_),
  PROTOBUF_FIELD_OFFSET(::transport_catalog_serialize::RGBA, _impl_.blue_),
  PROTOBUF_FIELD_OFFSET(::transport_catalog_serialize::RGBA, _impl_.opacity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::transport_catalog_serialize::Color, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::transport_catalog_serialize::Color, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::transport_catalog_serialize::Color, _impl_.colors_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::transport_catalog_serialize::Point)},
  { 8, -1, -1, sizeof(::transport_catalog_serialize::RGB)},
  { 17, -1, -1, sizeof(::transport_catalog_serialize::RGBA)},
  { 27, -1, -1, sizeof(::transport_catalog_serialize::Color)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::transport_catalog_serialize::_Point_default_instance_._instance,
  &::transport_catalog_serialize::_RGB_default_instance_._instance,
  &::transport_catalog_serialize::_RGBA_default_instance_._instance,
  &::transport_catalog_serialize::_Color_default_instance_._instance,
};

const char descriptor_table_protodef_svg_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tsvg.proto\022\033transport_catalog_serialize"
  "\"\035\n\005Point\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\"/\n\003RGB\022\013"
  "\n\003red\030\001 \001(\r\022\r\n\005green\030\002 \001(\r\022\014\n\004blue\030\003 \001(\r"
  "\"A\n\004RGBA\022\013\n\003red\030\001 \001(\r\022\r\n\005green\030\002 \001(\r\022\014\n\004"
  "blue\030\003 \001(\r\022\017\n\007opacity\030\004 \001(\001\"\237\001\n\005Color\022\022\n"
  "\010no_color\030\001 \001(\010H\000\022\024\n\ncolor_name\030\002 \001(\tH\000\022"
  "/\n\003rgb\030\003 \001(\0132 .transport_catalog_seriali"
  "ze.RGBH\000\0221\n\004rgba\030\004 \001(\0132!.transport_catal"
  "og_serialize.RGBAH\000B\010\n\006colorsb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_svg_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_svg_2eproto = {
    false, false, 357, descriptor_table_protodef_svg_2eproto,
    "svg.proto",
    &descriptor_table_svg_2eproto_once, nullptr, 0, 4,
    schemas, file_default_instances, TableStruct_svg_2eproto::offsets,
    file_level_metadata_svg_2eproto, file_level_enum_descriptors_svg_2eproto,
    file_level_service_descriptors_svg_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_svg_2eproto_getter() {
  return &descriptor_table_svg_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_svg_2eproto(&descriptor_table_svg_2eproto);
namespace transport_catalog_serialize {

// ===================================================================

class Point::_Internal {
 public:
};

Point::Point(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:transport_catalog_serialize.Point)
}
Point::Point(const Point& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Point* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.y_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  // @@protoc_insertion_point(copy_constructor:transport_catalog_serialize.Point)
}

inline void Point::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:transport_catalog_serialize.Point)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Point::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Point::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Point::Clear() {
// @@protoc_insertion_point(message_clear_start:transport_catalog_serialize.Point)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.y_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Point::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Point::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:transport_catalog_serialize.Point)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // double y = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transport_catalog_serialize.Point)
  return target;
}

size_t Point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transport_catalog_serialize.Point)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 8;
  }

  // double y = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Point::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Point::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Point::GetClassData() const { return &_class_data_; }


void Point::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Point*>(&to_msg);
  auto& from = static_cast<const Point&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:transport_catalog_serialize.Point)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = from._internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = from._internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Point::CopyFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transport_catalog_serialize.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {
  return true;
}

void Point::InternalSwap(Point* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Point, _impl_.y_)
      + sizeof(Point::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(Point, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Point::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_svg_2eproto_getter, &descriptor_table_svg_2eproto_once,
      file_level_metadata_svg_2eproto[0]);
}

// ===================================================================

class RGB::_Internal {
 public:
};

RGB::RGB(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:transport_catalog_serialize.RGB)
}
RGB::RGB(const RGB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RGB* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.red_){}
    , decltype(_impl_.green_){}
    , decltype(_impl_.blue_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.red_, &from._impl_.red_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.blue_) -
    reinterpret_cast<char*>(&_impl_.red_)) + sizeof(_impl_.blue_));
  // @@protoc_insertion_point(copy_constructor:transport_catalog_serialize.RGB)
}

inline void RGB::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.red_){0u}
    , decltype(_impl_.green_){0u}
    , decltype(_impl_.blue_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RGB::~RGB() {
  // @@protoc_insertion_point(destructor:transport_catalog_serialize.RGB)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RGB::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RGB::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RGB::Clear() {
// @@protoc_insertion_point(message_clear_start:transport_catalog_serialize.RGB)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.red_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.blue_) -
      reinterpret_cast<char*>(&_impl_.red_)) + sizeof(_impl_.blue_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RGB::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 red = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.red_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 green = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.green_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 blue = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.blue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RGB::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:transport_catalog_serialize.RGB)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 red = 1;
  if (this->_internal_red() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_red(), target);
  }

  // uint32 green = 2;
  if (this->_internal_green() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_green(), target);
  }

  // uint32 blue = 3;
  if (this->_internal_blue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_blue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transport_catalog_serialize.RGB)
  return target;
}

size_t RGB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transport_catalog_serialize.RGB)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 red = 1;
  if (this->_internal_red() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_red());
  }

  // uint32 green = 2;
  if (this->_internal_green() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_green());
  }

  // uint32 blue = 3;
  if (this->_internal_blue() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_blue());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RGB::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RGB::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RGB::GetClassData() const { return &_class_data_; }


void RGB::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RGB*>(&to_msg);
  auto& from = static_cast<const RGB&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:transport_catalog_serialize.RGB)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_red() != 0) {
    _this->_internal_set_red(from._internal_red());
  }
  if (from._internal_green() != 0) {
    _this->_internal_set_green(from._internal_green());
  }
  if (from._internal_blue() != 0) {
    _this->_internal_set_blue(from._internal_blue());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RGB::CopyFrom(const RGB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transport_catalog_serialize.RGB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RGB::IsInitialized() const {
  return true;
}

void RGB::InternalSwap(RGB* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RGB, _impl_.blue_)
      + sizeof(RGB::_impl_.blue_)
      - PROTOBUF_FIELD_OFFSET(RGB, _impl_.red_)>(
          reinterpret_cast<char*>(&_impl_.red_),
          reinterpret_cast<char*>(&other->_impl_.red_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RGB::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_svg_2eproto_getter, &descriptor_table_svg_2eproto_once,
      file_level_metadata_svg_2eproto[1]);
}

// ===================================================================

class RGBA::_Internal {
 public:
};

RGBA::RGBA(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:transport_catalog_serialize.RGBA)
}
RGBA::RGBA(const RGBA& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RGBA* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.red_){}
    , decltype(_impl_.green_){}
    , decltype(_impl_.opacity_){}
    , decltype(_impl_.blue_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.red_, &from._impl_.red_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.blue_) -
    reinterpret_cast<char*>(&_impl_.red_)) + sizeof(_impl_.blue_));
  // @@protoc_insertion_point(copy_constructor:transport_catalog_serialize.RGBA)
}

inline void RGBA::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.red_){0u}
    , decltype(_impl_.green_){0u}
    , decltype(_impl_.opacity_){0}
    , decltype(_impl_.blue_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RGBA::~RGBA() {
  // @@protoc_insertion_point(destructor:transport_catalog_serialize.RGBA)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RGBA::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RGBA::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RGBA::Clear() {
// @@protoc_insertion_point(message_clear_start:transport_catalog_serialize.RGBA)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.red_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.blue_) -
      reinterpret_cast<char*>(&_impl_.red_)) + sizeof(_impl_.blue_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RGBA::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 red = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.red_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 green = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.green_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 blue = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.blue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double opacity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.opacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RGBA::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:transport_catalog_serialize.RGBA)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 red = 1;
  if (this->_internal_red() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_red(), target);
  }

  // uint32 green = 2;
  if (this->_internal_green() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_green(), target);
  }

  // uint32 blue = 3;
  if (this->_internal_blue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_blue(), target);
  }

  // double opacity = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_opacity = this->_internal_opacity();
  uint64_t raw_opacity;
  memcpy(&raw_opacity, &tmp_opacity, sizeof(tmp_opacity));
  if (raw_opacity != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_opacity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transport_catalog_serialize.RGBA)
  return target;
}

size_t RGBA::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transport_catalog_serialize.RGBA)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 red = 1;
  if (this->_internal_red() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_red());
  }

  // uint32 green = 2;
  if (this->_internal_green() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_green());
  }

  // double opacity = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_opacity = this->_internal_opacity();
  uint64_t raw_opacity;
  memcpy(&raw_opacity, &tmp_opacity, sizeof(tmp_opacity));
  if (raw_opacity != 0) {
    total_size += 1 + 8;
  }

  // uint32 blue = 3;
  if (this->_internal_blue() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_blue());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RGBA::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RGBA::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RGBA::GetClassData() const { return &_class_data_; }


void RGBA::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RGBA*>(&to_msg);
  auto& from = static_cast<const RGBA&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:transport_catalog_serialize.RGBA)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_red() != 0) {
    _this->_internal_set_red(from._internal_red());
  }
  if (from._internal_green() != 0) {
    _this->_internal_set_green(from._internal_green());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_opacity = from._internal_opacity();
  uint64_t raw_opacity;
  memcpy(&raw_opacity, &tmp_opacity, sizeof(tmp_opacity));
  if (raw_opacity != 0) {
    _this->_internal_set_opacity(from._internal_opacity());
  }
  if (from._internal_blue() != 0) {
    _this->_internal_set_blue(from._internal_blue());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RGBA::CopyFrom(const RGBA& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transport_catalog_serialize.RGBA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RGBA::IsInitialized() const {
  return true;
}

void RGBA::InternalSwap(RGBA* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RGBA, _impl_.blue_)
      + sizeof(RGBA::_impl_.blue_)
      - PROTOBUF_FIELD_OFFSET(RGBA, _impl_.red_)>(
          reinterpret_cast<char*>(&_impl_.red_),
          reinterpret_cast<char*>(&other->_impl_.red_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RGBA::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_svg_2eproto_getter, &descriptor_table_svg_2eproto_once,
      file_level_metadata_svg_2eproto[2]);
}

// ===================================================================

class Color::_Internal {
 public:
  static const ::transport_catalog_serialize::RGB& rgb(const Color* msg);
  static const ::transport_catalog_serialize::RGBA& rgba(const Color* msg);
};

const ::transport_catalog_serialize::RGB&
Color::_Internal::rgb(const Color* msg) {
  return *msg->_impl_.colors_.rgb_;
}
const ::transport_catalog_serialize::RGBA&
Color::_Internal::rgba(const Color* msg) {
  return *msg->_impl_.colors_.rgba_;
}
void Color::set_allocated_rgb(::transport_catalog_serialize::RGB* rgb) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_colors();
  if (rgb) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rgb);
    if (message_arena != submessage_arena) {
      rgb = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rgb, submessage_arena);
    }
    set_has_rgb();
    _impl_.colors_.rgb_ = rgb;
  }
  // @@protoc_insertion_point(field_set_allocated:transport_catalog_serialize.Color.rgb)
}
void Color::set_allocated_rgba(::transport_catalog_serialize::RGBA* rgba) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_colors();
  if (rgba) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rgba);
    if (message_arena != submessage_arena) {
      rgba = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rgba, submessage_arena);
    }
    set_has_rgba();
    _impl_.colors_.rgba_ = rgba;
  }
  // @@protoc_insertion_point(field_set_allocated:transport_catalog_serialize.Color.rgba)
}
Color::Color(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:transport_catalog_serialize.Color)
}
Color::Color(const Color& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Color* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.colors_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_colors();
  switch (from.colors_case()) {
    case kNoColor: {
      _this->_internal_set_no_color(from._internal_no_color());
      break;
    }
    case kColorName: {
      _this->_internal_set_color_name(from._internal_color_name());
      break;
    }
    case kRgb: {
      _this->_internal_mutable_rgb()->::transport_catalog_serialize::RGB::MergeFrom(
          from._internal_rgb());
      break;
    }
    case kRgba: {
      _this->_internal_mutable_rgba()->::transport_catalog_serialize::RGBA::MergeFrom(
          from._internal_rgba());
      break;
    }
    case COLORS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:transport_catalog_serialize.Color)
}

inline void Color::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.colors_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_colors();
}

Color::~Color() {
  // @@protoc_insertion_point(destructor:transport_catalog_serialize.Color)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Color::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_colors()) {
    clear_colors();
  }
}

void Color::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Color::clear_colors() {
// @@protoc_insertion_point(one_of_clear_start:transport_catalog_serialize.Color)
  switch (colors_case()) {
    case kNoColor: {
      // No need to clear
      break;
    }
    case kColorName: {
      _impl_.colors_.color_name_.Destroy();
      break;
    }
    case kRgb: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.colors_.rgb_;
      }
      break;
    }
    case kRgba: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.colors_.rgba_;
      }
      break;
    }
    case COLORS_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = COLORS_NOT_SET;
}


void Color::Clear() {
// @@protoc_insertion_point(message_clear_start:transport_catalog_serialize.Color)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_colors();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Color::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool no_color = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _internal_set_no_color(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string color_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_color_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "transport_catalog_serialize.Color.color_name"));
        } else
          goto handle_unusual;
        continue;
      // .transport_catalog_serialize.RGB rgb = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_rgb(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .transport_catalog_serialize.RGBA rgba = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_rgba(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Color::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:transport_catalog_serialize.Color)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool no_color = 1;
  if (_internal_has_no_color()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_no_color(), target);
  }

  // string color_name = 2;
  if (_internal_has_color_name()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_color_name().data(), static_cast<int>(this->_internal_color_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "transport_catalog_serialize.Color.color_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_color_name(), target);
  }

  // .transport_catalog_serialize.RGB rgb = 3;
  if (_internal_has_rgb()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::rgb(this),
        _Internal::rgb(this).GetCachedSize(), target, stream);
  }

  // .transport_catalog_serialize.RGBA rgba = 4;
  if (_internal_has_rgba()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::rgba(this),
        _Internal::rgba(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transport_catalog_serialize.Color)
  return target;
}

size_t Color::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transport_catalog_serialize.Color)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (colors_case()) {
    // bool no_color = 1;
    case kNoColor: {
      total_size += 1 + 1;
      break;
    }
    // string color_name = 2;
    case kColorName: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_color_name());
      break;
    }
    // .transport_catalog_serialize.RGB rgb = 3;
    case kRgb: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.colors_.rgb_);
      break;
    }
    // .transport_catalog_serialize.RGBA rgba = 4;
    case kRgba: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.colors_.rgba_);
      break;
    }
    case COLORS_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Color::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Color::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Color::GetClassData() const { return &_class_data_; }


void Color::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Color*>(&to_msg);
  auto& from = static_cast<const Color&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:transport_catalog_serialize.Color)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.colors_case()) {
    case kNoColor: {
      _this->_internal_set_no_color(from._internal_no_color());
      break;
    }
    case kColorName: {
      _this->_internal_set_color_name(from._internal_color_name());
      break;
    }
    case kRgb: {
      _this->_internal_mutable_rgb()->::transport_catalog_serialize::RGB::MergeFrom(
          from._internal_rgb());
      break;
    }
    case kRgba: {
      _this->_internal_mutable_rgba()->::transport_catalog_serialize::RGBA::MergeFrom(
          from._internal_rgba());
      break;
    }
    case COLORS_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Color::CopyFrom(const Color& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transport_catalog_serialize.Color)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Color::IsInitialized() const {
  return true;
}

void Color::InternalSwap(Color* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.colors_, other->_impl_.colors_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Color::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_svg_2eproto_getter, &descriptor_table_svg_2eproto_once,
      file_level_metadata_svg_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace transport_catalog_serialize
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::transport_catalog_serialize::Point*
Arena::CreateMaybeMessage< ::transport_catalog_serialize::Point >(Arena* arena) {
  return Arena::CreateMessageInternal< ::transport_catalog_serialize::Point >(arena);
}
template<> PROTOBUF_NOINLINE ::transport_catalog_serialize::RGB*
Arena::CreateMaybeMessage< ::transport_catalog_serialize::RGB >(Arena* arena) {
  return Arena::CreateMessageInternal< ::transport_catalog_serialize::RGB >(arena);
}
template<> PROTOBUF_NOINLINE ::transport_catalog_serialize::RGBA*
Arena::CreateMaybeMessage< ::transport_catalog_serialize::RGBA >(Arena* arena) {
  return Arena::CreateMessageInternal< ::transport_catalog_serialize::RGBA >(arena);
}
template<> PROTOBUF_NOINLINE ::transport_catalog_serialize::Color*
Arena::CreateMaybeMessage< ::transport_catalog_serialize::Color >(Arena* arena) {
  return Arena::CreateMessageInternal< ::transport_catalog_serialize::Color >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
