// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transport_catalogue.proto

#include "transport_catalogue.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace transport_catalog_serialize {
PROTOBUF_CONSTEXPR Coordinates::Coordinates(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.latitude_)*/0
  , /*decltype(_impl_.longitude_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CoordinatesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CoordinatesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CoordinatesDefaultTypeInternal() {}
  union {
    Coordinates _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CoordinatesDefaultTypeInternal _Coordinates_default_instance_;
PROTOBUF_CONSTEXPR Stop::Stop(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.coordinates_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StopDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StopDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StopDefaultTypeInternal() {}
  union {
    Stop _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StopDefaultTypeInternal _Stop_default_instance_;
PROTOBUF_CONSTEXPR Bus::Bus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.stop_id_)*/{}
  , /*decltype(_impl_._stop_id_cached_byte_size_)*/{0}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.is_roundtrip_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BusDefaultTypeInternal() {}
  union {
    Bus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BusDefaultTypeInternal _Bus_default_instance_;
PROTOBUF_CONSTEXPR Distance::Distance(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.stop_id_from_)*/uint64_t{0u}
  , /*decltype(_impl_.stop_id_to_)*/uint64_t{0u}
  , /*decltype(_impl_.distance_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DistanceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DistanceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DistanceDefaultTypeInternal() {}
  union {
    Distance _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DistanceDefaultTypeInternal _Distance_default_instance_;
PROTOBUF_CONSTEXPR TransportCatalogue_StopsEntry_DoNotUse::TransportCatalogue_StopsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct TransportCatalogue_StopsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TransportCatalogue_StopsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TransportCatalogue_StopsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TransportCatalogue_StopsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TransportCatalogue_StopsEntry_DoNotUseDefaultTypeInternal _TransportCatalogue_StopsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TransportCatalogue::TransportCatalogue(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.stops_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.bus_)*/{}
  , /*decltype(_impl_.distance_)*/{}
  , /*decltype(_impl_.map_settings_)*/nullptr
  , /*decltype(_impl_.router_settings_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TransportCatalogueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TransportCatalogueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TransportCatalogueDefaultTypeInternal() {}
  union {
    TransportCatalogue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TransportCatalogueDefaultTypeInternal _TransportCatalogue_default_instance_;
}  // namespace transport_catalog_serialize
static ::_pb::Metadata file_level_metadata_transport_5fcatalogue_2eproto[6];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_transport_5fcatalogue_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_transport_5fcatalogue_2eproto = nullptr;

const uint32_t TableStruct_transport_5fcatalogue_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::transport_catalog_serialize::Coordinates, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::transport_catalog_serialize::Coordinates, _impl_.latitude_),
  PROTOBUF_FIELD_OFFSET(::transport_catalog_serialize::Coordinates, _impl_.longitude_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::transport_catalog_serialize::Stop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::transport_catalog_serialize::Stop, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::transport_catalog_serialize::Stop, _impl_.coordinates_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::transport_catalog_serialize::Bus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::transport_catalog_serialize::Bus, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::transport_catalog_serialize::Bus, _impl_.stop_id_),
  PROTOBUF_FIELD_OFFSET(::transport_catalog_serialize::Bus, _impl_.is_roundtrip_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::transport_catalog_serialize::Distance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::transport_catalog_serialize::Distance, _impl_.stop_id_from_),
  PROTOBUF_FIELD_OFFSET(::transport_catalog_serialize::Distance, _impl_.stop_id_to_),
  PROTOBUF_FIELD_OFFSET(::transport_catalog_serialize::Distance, _impl_.distance_),
  PROTOBUF_FIELD_OFFSET(::transport_catalog_serialize::TransportCatalogue_StopsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::transport_catalog_serialize::TransportCatalogue_StopsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::transport_catalog_serialize::TransportCatalogue_StopsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::transport_catalog_serialize::TransportCatalogue_StopsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::transport_catalog_serialize::TransportCatalogue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::transport_catalog_serialize::TransportCatalogue, _impl_.stops_),
  PROTOBUF_FIELD_OFFSET(::transport_catalog_serialize::TransportCatalogue, _impl_.bus_),
  PROTOBUF_FIELD_OFFSET(::transport_catalog_serialize::TransportCatalogue, _impl_.distance_),
  PROTOBUF_FIELD_OFFSET(::transport_catalog_serialize::TransportCatalogue, _impl_.map_settings_),
  PROTOBUF_FIELD_OFFSET(::transport_catalog_serialize::TransportCatalogue, _impl_.router_settings_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::transport_catalog_serialize::Coordinates)},
  { 8, -1, -1, sizeof(::transport_catalog_serialize::Stop)},
  { 16, -1, -1, sizeof(::transport_catalog_serialize::Bus)},
  { 25, -1, -1, sizeof(::transport_catalog_serialize::Distance)},
  { 34, 42, -1, sizeof(::transport_catalog_serialize::TransportCatalogue_StopsEntry_DoNotUse)},
  { 44, -1, -1, sizeof(::transport_catalog_serialize::TransportCatalogue)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::transport_catalog_serialize::_Coordinates_default_instance_._instance,
  &::transport_catalog_serialize::_Stop_default_instance_._instance,
  &::transport_catalog_serialize::_Bus_default_instance_._instance,
  &::transport_catalog_serialize::_Distance_default_instance_._instance,
  &::transport_catalog_serialize::_TransportCatalogue_StopsEntry_DoNotUse_default_instance_._instance,
  &::transport_catalog_serialize::_TransportCatalogue_default_instance_._instance,
};

const char descriptor_table_protodef_transport_5fcatalogue_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031transport_catalogue.proto\022\033transport_c"
  "atalog_serialize\032\022map_renderer.proto\032\026tr"
  "ansport_router.proto\"2\n\013Coordinates\022\020\n\010l"
  "atitude\030\001 \001(\001\022\021\n\tlongitude\030\002 \001(\001\"S\n\004Stop"
  "\022\014\n\004name\030\001 \001(\014\022=\n\013coordinates\030\002 \001(\0132(.tr"
  "ansport_catalog_serialize.Coordinates\":\n"
  "\003Bus\022\014\n\004name\030\001 \001(\014\022\017\n\007stop_id\030\002 \003(\004\022\024\n\014i"
  "s_roundtrip\030\003 \001(\010\"F\n\010Distance\022\024\n\014stop_id"
  "_from\030\001 \001(\004\022\022\n\nstop_id_to\030\002 \001(\004\022\020\n\010dista"
  "nce\030\003 \001(\001\"\236\003\n\022TransportCatalogue\022I\n\005stop"
  "s\030\001 \003(\0132:.transport_catalog_serialize.Tr"
  "ansportCatalogue.StopsEntry\022-\n\003bus\030\002 \003(\013"
  "2 .transport_catalog_serialize.Bus\0227\n\010di"
  "stance\030\003 \003(\0132%.transport_catalog_seriali"
  "ze.Distance\022>\n\014map_settings\030\004 \001(\0132(.tran"
  "sport_catalog_serialize.MapSettings\022D\n\017r"
  "outer_settings\030\005 \001(\0132+.transport_catalog"
  "_serialize.RouterSettings\032O\n\nStopsEntry\022"
  "\013\n\003key\030\001 \001(\004\0220\n\005value\030\002 \001(\0132!.transport_"
  "catalog_serialize.Stop:\0028\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_transport_5fcatalogue_2eproto_deps[2] = {
  &::descriptor_table_map_5frenderer_2eproto,
  &::descriptor_table_transport_5frouter_2eproto,
};
static ::_pbi::once_flag descriptor_table_transport_5fcatalogue_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_transport_5fcatalogue_2eproto = {
    false, false, 794, descriptor_table_protodef_transport_5fcatalogue_2eproto,
    "transport_catalogue.proto",
    &descriptor_table_transport_5fcatalogue_2eproto_once, descriptor_table_transport_5fcatalogue_2eproto_deps, 2, 6,
    schemas, file_default_instances, TableStruct_transport_5fcatalogue_2eproto::offsets,
    file_level_metadata_transport_5fcatalogue_2eproto, file_level_enum_descriptors_transport_5fcatalogue_2eproto,
    file_level_service_descriptors_transport_5fcatalogue_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_transport_5fcatalogue_2eproto_getter() {
  return &descriptor_table_transport_5fcatalogue_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_transport_5fcatalogue_2eproto(&descriptor_table_transport_5fcatalogue_2eproto);
namespace transport_catalog_serialize {

// ===================================================================

class Coordinates::_Internal {
 public:
};

Coordinates::Coordinates(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:transport_catalog_serialize.Coordinates)
}
Coordinates::Coordinates(const Coordinates& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Coordinates* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.latitude_){}
    , decltype(_impl_.longitude_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.latitude_, &from._impl_.latitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.longitude_) -
    reinterpret_cast<char*>(&_impl_.latitude_)) + sizeof(_impl_.longitude_));
  // @@protoc_insertion_point(copy_constructor:transport_catalog_serialize.Coordinates)
}

inline void Coordinates::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.latitude_){0}
    , decltype(_impl_.longitude_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Coordinates::~Coordinates() {
  // @@protoc_insertion_point(destructor:transport_catalog_serialize.Coordinates)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Coordinates::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Coordinates::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Coordinates::Clear() {
// @@protoc_insertion_point(message_clear_start:transport_catalog_serialize.Coordinates)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.latitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.longitude_) -
      reinterpret_cast<char*>(&_impl_.latitude_)) + sizeof(_impl_.longitude_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Coordinates::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double latitude = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double longitude = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Coordinates::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:transport_catalog_serialize.Coordinates)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double latitude = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_latitude = this->_internal_latitude();
  uint64_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_latitude(), target);
  }

  // double longitude = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_longitude = this->_internal_longitude();
  uint64_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_longitude(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transport_catalog_serialize.Coordinates)
  return target;
}

size_t Coordinates::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transport_catalog_serialize.Coordinates)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double latitude = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_latitude = this->_internal_latitude();
  uint64_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    total_size += 1 + 8;
  }

  // double longitude = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_longitude = this->_internal_longitude();
  uint64_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Coordinates::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Coordinates::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Coordinates::GetClassData() const { return &_class_data_; }


void Coordinates::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Coordinates*>(&to_msg);
  auto& from = static_cast<const Coordinates&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:transport_catalog_serialize.Coordinates)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_latitude = from._internal_latitude();
  uint64_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    _this->_internal_set_latitude(from._internal_latitude());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_longitude = from._internal_longitude();
  uint64_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    _this->_internal_set_longitude(from._internal_longitude());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Coordinates::CopyFrom(const Coordinates& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transport_catalog_serialize.Coordinates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Coordinates::IsInitialized() const {
  return true;
}

void Coordinates::InternalSwap(Coordinates* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Coordinates, _impl_.longitude_)
      + sizeof(Coordinates::_impl_.longitude_)
      - PROTOBUF_FIELD_OFFSET(Coordinates, _impl_.latitude_)>(
          reinterpret_cast<char*>(&_impl_.latitude_),
          reinterpret_cast<char*>(&other->_impl_.latitude_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Coordinates::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_5fcatalogue_2eproto_getter, &descriptor_table_transport_5fcatalogue_2eproto_once,
      file_level_metadata_transport_5fcatalogue_2eproto[0]);
}

// ===================================================================

class Stop::_Internal {
 public:
  static const ::transport_catalog_serialize::Coordinates& coordinates(const Stop* msg);
};

const ::transport_catalog_serialize::Coordinates&
Stop::_Internal::coordinates(const Stop* msg) {
  return *msg->_impl_.coordinates_;
}
Stop::Stop(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:transport_catalog_serialize.Stop)
}
Stop::Stop(const Stop& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Stop* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.coordinates_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_coordinates()) {
    _this->_impl_.coordinates_ = new ::transport_catalog_serialize::Coordinates(*from._impl_.coordinates_);
  }
  // @@protoc_insertion_point(copy_constructor:transport_catalog_serialize.Stop)
}

inline void Stop::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.coordinates_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Stop::~Stop() {
  // @@protoc_insertion_point(destructor:transport_catalog_serialize.Stop)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Stop::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.coordinates_;
}

void Stop::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Stop::Clear() {
// @@protoc_insertion_point(message_clear_start:transport_catalog_serialize.Stop)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.coordinates_ != nullptr) {
    delete _impl_.coordinates_;
  }
  _impl_.coordinates_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Stop::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .transport_catalog_serialize.Coordinates coordinates = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_coordinates(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Stop::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:transport_catalog_serialize.Stop)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes name = 1;
  if (!this->_internal_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .transport_catalog_serialize.Coordinates coordinates = 2;
  if (this->_internal_has_coordinates()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::coordinates(this),
        _Internal::coordinates(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transport_catalog_serialize.Stop)
  return target;
}

size_t Stop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transport_catalog_serialize.Stop)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // .transport_catalog_serialize.Coordinates coordinates = 2;
  if (this->_internal_has_coordinates()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.coordinates_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Stop::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Stop::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Stop::GetClassData() const { return &_class_data_; }


void Stop::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Stop*>(&to_msg);
  auto& from = static_cast<const Stop&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:transport_catalog_serialize.Stop)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_coordinates()) {
    _this->_internal_mutable_coordinates()->::transport_catalog_serialize::Coordinates::MergeFrom(
        from._internal_coordinates());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Stop::CopyFrom(const Stop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transport_catalog_serialize.Stop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stop::IsInitialized() const {
  return true;
}

void Stop::InternalSwap(Stop* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.coordinates_, other->_impl_.coordinates_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Stop::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_5fcatalogue_2eproto_getter, &descriptor_table_transport_5fcatalogue_2eproto_once,
      file_level_metadata_transport_5fcatalogue_2eproto[1]);
}

// ===================================================================

class Bus::_Internal {
 public:
};

Bus::Bus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:transport_catalog_serialize.Bus)
}
Bus::Bus(const Bus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Bus* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.stop_id_){from._impl_.stop_id_}
    , /*decltype(_impl_._stop_id_cached_byte_size_)*/{0}
    , decltype(_impl_.name_){}
    , decltype(_impl_.is_roundtrip_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.is_roundtrip_ = from._impl_.is_roundtrip_;
  // @@protoc_insertion_point(copy_constructor:transport_catalog_serialize.Bus)
}

inline void Bus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.stop_id_){arena}
    , /*decltype(_impl_._stop_id_cached_byte_size_)*/{0}
    , decltype(_impl_.name_){}
    , decltype(_impl_.is_roundtrip_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Bus::~Bus() {
  // @@protoc_insertion_point(destructor:transport_catalog_serialize.Bus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Bus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stop_id_.~RepeatedField();
  _impl_.name_.Destroy();
}

void Bus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Bus::Clear() {
// @@protoc_insertion_point(message_clear_start:transport_catalog_serialize.Bus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stop_id_.Clear();
  _impl_.name_.ClearToEmpty();
  _impl_.is_roundtrip_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Bus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 stop_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_stop_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_stop_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_roundtrip = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.is_roundtrip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Bus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:transport_catalog_serialize.Bus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes name = 1;
  if (!this->_internal_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated uint64 stop_id = 2;
  {
    int byte_size = _impl_._stop_id_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          2, _internal_stop_id(), byte_size, target);
    }
  }

  // bool is_roundtrip = 3;
  if (this->_internal_is_roundtrip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_is_roundtrip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transport_catalog_serialize.Bus)
  return target;
}

size_t Bus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transport_catalog_serialize.Bus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 stop_id = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.stop_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._stop_id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bytes name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // bool is_roundtrip = 3;
  if (this->_internal_is_roundtrip() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Bus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Bus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Bus::GetClassData() const { return &_class_data_; }


void Bus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Bus*>(&to_msg);
  auto& from = static_cast<const Bus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:transport_catalog_serialize.Bus)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.stop_id_.MergeFrom(from._impl_.stop_id_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_is_roundtrip() != 0) {
    _this->_internal_set_is_roundtrip(from._internal_is_roundtrip());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Bus::CopyFrom(const Bus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transport_catalog_serialize.Bus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bus::IsInitialized() const {
  return true;
}

void Bus::InternalSwap(Bus* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.stop_id_.InternalSwap(&other->_impl_.stop_id_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.is_roundtrip_, other->_impl_.is_roundtrip_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Bus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_5fcatalogue_2eproto_getter, &descriptor_table_transport_5fcatalogue_2eproto_once,
      file_level_metadata_transport_5fcatalogue_2eproto[2]);
}

// ===================================================================

class Distance::_Internal {
 public:
};

Distance::Distance(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:transport_catalog_serialize.Distance)
}
Distance::Distance(const Distance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Distance* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.stop_id_from_){}
    , decltype(_impl_.stop_id_to_){}
    , decltype(_impl_.distance_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.stop_id_from_, &from._impl_.stop_id_from_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.distance_) -
    reinterpret_cast<char*>(&_impl_.stop_id_from_)) + sizeof(_impl_.distance_));
  // @@protoc_insertion_point(copy_constructor:transport_catalog_serialize.Distance)
}

inline void Distance::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.stop_id_from_){uint64_t{0u}}
    , decltype(_impl_.stop_id_to_){uint64_t{0u}}
    , decltype(_impl_.distance_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Distance::~Distance() {
  // @@protoc_insertion_point(destructor:transport_catalog_serialize.Distance)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Distance::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Distance::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Distance::Clear() {
// @@protoc_insertion_point(message_clear_start:transport_catalog_serialize.Distance)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.stop_id_from_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.distance_) -
      reinterpret_cast<char*>(&_impl_.stop_id_from_)) + sizeof(_impl_.distance_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Distance::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 stop_id_from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.stop_id_from_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 stop_id_to = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.stop_id_to_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double distance = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Distance::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:transport_catalog_serialize.Distance)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 stop_id_from = 1;
  if (this->_internal_stop_id_from() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_stop_id_from(), target);
  }

  // uint64 stop_id_to = 2;
  if (this->_internal_stop_id_to() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_stop_id_to(), target);
  }

  // double distance = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_distance = this->_internal_distance();
  uint64_t raw_distance;
  memcpy(&raw_distance, &tmp_distance, sizeof(tmp_distance));
  if (raw_distance != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transport_catalog_serialize.Distance)
  return target;
}

size_t Distance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transport_catalog_serialize.Distance)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 stop_id_from = 1;
  if (this->_internal_stop_id_from() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_stop_id_from());
  }

  // uint64 stop_id_to = 2;
  if (this->_internal_stop_id_to() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_stop_id_to());
  }

  // double distance = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_distance = this->_internal_distance();
  uint64_t raw_distance;
  memcpy(&raw_distance, &tmp_distance, sizeof(tmp_distance));
  if (raw_distance != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Distance::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Distance::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Distance::GetClassData() const { return &_class_data_; }


void Distance::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Distance*>(&to_msg);
  auto& from = static_cast<const Distance&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:transport_catalog_serialize.Distance)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_stop_id_from() != 0) {
    _this->_internal_set_stop_id_from(from._internal_stop_id_from());
  }
  if (from._internal_stop_id_to() != 0) {
    _this->_internal_set_stop_id_to(from._internal_stop_id_to());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_distance = from._internal_distance();
  uint64_t raw_distance;
  memcpy(&raw_distance, &tmp_distance, sizeof(tmp_distance));
  if (raw_distance != 0) {
    _this->_internal_set_distance(from._internal_distance());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Distance::CopyFrom(const Distance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transport_catalog_serialize.Distance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Distance::IsInitialized() const {
  return true;
}

void Distance::InternalSwap(Distance* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Distance, _impl_.distance_)
      + sizeof(Distance::_impl_.distance_)
      - PROTOBUF_FIELD_OFFSET(Distance, _impl_.stop_id_from_)>(
          reinterpret_cast<char*>(&_impl_.stop_id_from_),
          reinterpret_cast<char*>(&other->_impl_.stop_id_from_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Distance::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_5fcatalogue_2eproto_getter, &descriptor_table_transport_5fcatalogue_2eproto_once,
      file_level_metadata_transport_5fcatalogue_2eproto[3]);
}

// ===================================================================

TransportCatalogue_StopsEntry_DoNotUse::TransportCatalogue_StopsEntry_DoNotUse() {}
TransportCatalogue_StopsEntry_DoNotUse::TransportCatalogue_StopsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TransportCatalogue_StopsEntry_DoNotUse::MergeFrom(const TransportCatalogue_StopsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TransportCatalogue_StopsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_5fcatalogue_2eproto_getter, &descriptor_table_transport_5fcatalogue_2eproto_once,
      file_level_metadata_transport_5fcatalogue_2eproto[4]);
}

// ===================================================================

class TransportCatalogue::_Internal {
 public:
  static const ::transport_catalog_serialize::MapSettings& map_settings(const TransportCatalogue* msg);
  static const ::transport_catalog_serialize::RouterSettings& router_settings(const TransportCatalogue* msg);
};

const ::transport_catalog_serialize::MapSettings&
TransportCatalogue::_Internal::map_settings(const TransportCatalogue* msg) {
  return *msg->_impl_.map_settings_;
}
const ::transport_catalog_serialize::RouterSettings&
TransportCatalogue::_Internal::router_settings(const TransportCatalogue* msg) {
  return *msg->_impl_.router_settings_;
}
void TransportCatalogue::clear_map_settings() {
  if (GetArenaForAllocation() == nullptr && _impl_.map_settings_ != nullptr) {
    delete _impl_.map_settings_;
  }
  _impl_.map_settings_ = nullptr;
}
void TransportCatalogue::clear_router_settings() {
  if (GetArenaForAllocation() == nullptr && _impl_.router_settings_ != nullptr) {
    delete _impl_.router_settings_;
  }
  _impl_.router_settings_ = nullptr;
}
TransportCatalogue::TransportCatalogue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &TransportCatalogue::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:transport_catalog_serialize.TransportCatalogue)
}
TransportCatalogue::TransportCatalogue(const TransportCatalogue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TransportCatalogue* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.stops_)*/{}
    , decltype(_impl_.bus_){from._impl_.bus_}
    , decltype(_impl_.distance_){from._impl_.distance_}
    , decltype(_impl_.map_settings_){nullptr}
    , decltype(_impl_.router_settings_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.stops_.MergeFrom(from._impl_.stops_);
  if (from._internal_has_map_settings()) {
    _this->_impl_.map_settings_ = new ::transport_catalog_serialize::MapSettings(*from._impl_.map_settings_);
  }
  if (from._internal_has_router_settings()) {
    _this->_impl_.router_settings_ = new ::transport_catalog_serialize::RouterSettings(*from._impl_.router_settings_);
  }
  // @@protoc_insertion_point(copy_constructor:transport_catalog_serialize.TransportCatalogue)
}

inline void TransportCatalogue::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.stops_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.bus_){arena}
    , decltype(_impl_.distance_){arena}
    , decltype(_impl_.map_settings_){nullptr}
    , decltype(_impl_.router_settings_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TransportCatalogue::~TransportCatalogue() {
  // @@protoc_insertion_point(destructor:transport_catalog_serialize.TransportCatalogue)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void TransportCatalogue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stops_.Destruct();
  _impl_.stops_.~MapField();
  _impl_.bus_.~RepeatedPtrField();
  _impl_.distance_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.map_settings_;
  if (this != internal_default_instance()) delete _impl_.router_settings_;
}

void TransportCatalogue::ArenaDtor(void* object) {
  TransportCatalogue* _this = reinterpret_cast< TransportCatalogue* >(object);
  _this->_impl_.stops_.Destruct();
}
void TransportCatalogue::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TransportCatalogue::Clear() {
// @@protoc_insertion_point(message_clear_start:transport_catalog_serialize.TransportCatalogue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stops_.Clear();
  _impl_.bus_.Clear();
  _impl_.distance_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.map_settings_ != nullptr) {
    delete _impl_.map_settings_;
  }
  _impl_.map_settings_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.router_settings_ != nullptr) {
    delete _impl_.router_settings_;
  }
  _impl_.router_settings_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransportCatalogue::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<uint64, .transport_catalog_serialize.Stop> stops = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.stops_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .transport_catalog_serialize.Bus bus = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bus(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .transport_catalog_serialize.Distance distance = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_distance(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .transport_catalog_serialize.MapSettings map_settings = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_map_settings(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .transport_catalog_serialize.RouterSettings router_settings = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_router_settings(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TransportCatalogue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:transport_catalog_serialize.TransportCatalogue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<uint64, .transport_catalog_serialize.Stop> stops = 1;
  if (!this->_internal_stops().empty()) {
    using MapType = ::_pb::Map<uint64_t, ::transport_catalog_serialize::Stop>;
    using WireHelper = TransportCatalogue_StopsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_stops();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
      }
    }
  }

  // repeated .transport_catalog_serialize.Bus bus = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_bus_size()); i < n; i++) {
    const auto& repfield = this->_internal_bus(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .transport_catalog_serialize.Distance distance = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_distance_size()); i < n; i++) {
    const auto& repfield = this->_internal_distance(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .transport_catalog_serialize.MapSettings map_settings = 4;
  if (this->_internal_has_map_settings()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::map_settings(this),
        _Internal::map_settings(this).GetCachedSize(), target, stream);
  }

  // .transport_catalog_serialize.RouterSettings router_settings = 5;
  if (this->_internal_has_router_settings()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::router_settings(this),
        _Internal::router_settings(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transport_catalog_serialize.TransportCatalogue)
  return target;
}

size_t TransportCatalogue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transport_catalog_serialize.TransportCatalogue)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint64, .transport_catalog_serialize.Stop> stops = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_stops_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::transport_catalog_serialize::Stop >::const_iterator
      it = this->_internal_stops().begin();
      it != this->_internal_stops().end(); ++it) {
    total_size += TransportCatalogue_StopsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .transport_catalog_serialize.Bus bus = 2;
  total_size += 1UL * this->_internal_bus_size();
  for (const auto& msg : this->_impl_.bus_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .transport_catalog_serialize.Distance distance = 3;
  total_size += 1UL * this->_internal_distance_size();
  for (const auto& msg : this->_impl_.distance_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .transport_catalog_serialize.MapSettings map_settings = 4;
  if (this->_internal_has_map_settings()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.map_settings_);
  }

  // .transport_catalog_serialize.RouterSettings router_settings = 5;
  if (this->_internal_has_router_settings()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.router_settings_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransportCatalogue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TransportCatalogue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransportCatalogue::GetClassData() const { return &_class_data_; }


void TransportCatalogue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TransportCatalogue*>(&to_msg);
  auto& from = static_cast<const TransportCatalogue&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:transport_catalog_serialize.TransportCatalogue)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.stops_.MergeFrom(from._impl_.stops_);
  _this->_impl_.bus_.MergeFrom(from._impl_.bus_);
  _this->_impl_.distance_.MergeFrom(from._impl_.distance_);
  if (from._internal_has_map_settings()) {
    _this->_internal_mutable_map_settings()->::transport_catalog_serialize::MapSettings::MergeFrom(
        from._internal_map_settings());
  }
  if (from._internal_has_router_settings()) {
    _this->_internal_mutable_router_settings()->::transport_catalog_serialize::RouterSettings::MergeFrom(
        from._internal_router_settings());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransportCatalogue::CopyFrom(const TransportCatalogue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transport_catalog_serialize.TransportCatalogue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransportCatalogue::IsInitialized() const {
  return true;
}

void TransportCatalogue::InternalSwap(TransportCatalogue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.stops_.InternalSwap(&other->_impl_.stops_);
  _impl_.bus_.InternalSwap(&other->_impl_.bus_);
  _impl_.distance_.InternalSwap(&other->_impl_.distance_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransportCatalogue, _impl_.router_settings_)
      + sizeof(TransportCatalogue::_impl_.router_settings_)
      - PROTOBUF_FIELD_OFFSET(TransportCatalogue, _impl_.map_settings_)>(
          reinterpret_cast<char*>(&_impl_.map_settings_),
          reinterpret_cast<char*>(&other->_impl_.map_settings_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransportCatalogue::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_5fcatalogue_2eproto_getter, &descriptor_table_transport_5fcatalogue_2eproto_once,
      file_level_metadata_transport_5fcatalogue_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace transport_catalog_serialize
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::transport_catalog_serialize::Coordinates*
Arena::CreateMaybeMessage< ::transport_catalog_serialize::Coordinates >(Arena* arena) {
  return Arena::CreateMessageInternal< ::transport_catalog_serialize::Coordinates >(arena);
}
template<> PROTOBUF_NOINLINE ::transport_catalog_serialize::Stop*
Arena::CreateMaybeMessage< ::transport_catalog_serialize::Stop >(Arena* arena) {
  return Arena::CreateMessageInternal< ::transport_catalog_serialize::Stop >(arena);
}
template<> PROTOBUF_NOINLINE ::transport_catalog_serialize::Bus*
Arena::CreateMaybeMessage< ::transport_catalog_serialize::Bus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::transport_catalog_serialize::Bus >(arena);
}
template<> PROTOBUF_NOINLINE ::transport_catalog_serialize::Distance*
Arena::CreateMaybeMessage< ::transport_catalog_serialize::Distance >(Arena* arena) {
  return Arena::CreateMessageInternal< ::transport_catalog_serialize::Distance >(arena);
}
template<> PROTOBUF_NOINLINE ::transport_catalog_serialize::TransportCatalogue_StopsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::transport_catalog_serialize::TransportCatalogue_StopsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::transport_catalog_serialize::TransportCatalogue_StopsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::transport_catalog_serialize::TransportCatalogue*
Arena::CreateMaybeMessage< ::transport_catalog_serialize::TransportCatalogue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::transport_catalog_serialize::TransportCatalogue >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
